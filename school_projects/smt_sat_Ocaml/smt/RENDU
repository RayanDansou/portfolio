           Mini-projet 2 : Synthèse d'invariant en SMT-LIB
                            fichier RENDU
                     (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 19 décembre 2022

Identité
--------
Nombre de binôme: 81
Nom, prénom 1: Dansou Yao Rayan
Nom, prénom 2: Hamache Doryan

Questions sur votre code
------------------------

** Exercice 2 **

0. Avez-vous testé que `make invariants` s'exécute sans erreurs ou
   warnings, puis que `./invariants` produit une sortie au format
   SMT-LIB, et enfin que cette sortie est acceptée par Z3 ?

   Oui cela a été fait 

---

1. Le type `term` est un type récursif : quel type de fonction est-il
   naturel d'utiliser ? Quels sont vos cas de base et quelle quantité
   strictement décroissante au cours des appels successifs vous assure
   la terminaison ?
   

   Il est naturel d'utiliser des fonctions récursives pour ce genre de type.
   Les cas de base seraient CONST et VAR. Le nombre d'unvariants est strictement décroissant a chaque appel
   recursif et garantit la terminaison de la fonction


---

2. Pour l'implémentation de `str_condition`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ? (Par
   une fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length` ou
   `List.rev_append`, ou une fonction `aux_str_condition` que vous
   avez écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `str_condition`.
   
   Nous avons uniquement utilisé la fonction aux demandée dans l'énoncé.
   elle prend une liste et si elle est vide on renoie une chaine vide sinon on appelle string_repeat sur
   le premier element et on fait l'appel recursif sur le reste de la liste

---

3. Pour l'implémentation de `str_assert_forall`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ?
   Expliquez en quelques phrases en français comment ces fonctions
   auxiliaires sont utilisées dans votre implémentation de la fonction
   `str_assert_forall`.
   
   Nous avons uniquement utilisé la fonction str_assert fournie dans le sujet
   
---

4. Le langage de programmation WA suppose que les mises à jour des
   variables `x1`, ..., `xk` sont simultanées : par exemple, si `x1`
   vaut `1` et x2 vaut `1`, exécuter

   x1 = x2 + 1;
   x2 = x1 + 1;

   résulte en `x1` valant `2` et `x2` valant `2`. En Java, les mises à
   jour sont séquentielles et le résultat serait que `x1` vaudrait `2`
   et `x2` vaudrait `3`. Expliquez en français comment modifier le
   code pour construite un programme SMT-LIB plus proche de la façon
   dont les variables sont mises à jour en Java.

   on pourrait ecrire une ligne pour chaque modification:
   (Invar (+ x 1))
   (Invar (+ y 3))




---
5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**


